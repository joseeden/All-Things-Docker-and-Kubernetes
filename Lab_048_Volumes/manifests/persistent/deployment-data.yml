apiVersion: v1
kind: Service
metadata:
  name: data-tier
  namespace: volumes
  labels:
    app: microservices
spec:
  ports:
  - port: 6379
    protocol: TCP # default 
    name: redis # optional when only 1 port
  selector:
    tier: data 
  type: ClusterIP # default
---
apiVersion: v1
kind: PersistentVolume
metadata:
  namespace: volumes
  name: data-tier-volume
spec:
  capacity:
    storage: 1Gi # 1 gibibyte
  accessModes:
    - ReadWriteOnce
  awsElasticBlockStore: 
    #volumeID: INSERT_VOLUME_ID # replace with actual ID
    volumeID: "vol-0c8f51b897c8960b9" # replace with actual ID
    fsType: "ext4"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: volumes
  name: data-tier-volume-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 128Mi # 128 mebibytes 
---
apiVersion: apps/v1 # apps API group
kind: Deployment
metadata:
  namespace: volumes
  name: data-tier
  labels:
    app: microservices
    tier: data
spec:
  replicas: 1
  selector:
    matchLabels:
      tier: data
  template:
    metadata:
      labels:
        app: microservices
        tier: data
    spec: # Pod spec
      containers:
      - name: redis
        image: redis:latest
        imagePullPolicy: IfNotPresent
        ports:
          - name: redis
            containerPort: 6379
        volumeMounts:
          - mountPath: /data
            name: data-tier-volume
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "128Mi"
            cpu: "500m"
      volumes:
      - name: data-tier-volume
        persistentVolumeClaim:
          claimName: data-tier-volume-claim
